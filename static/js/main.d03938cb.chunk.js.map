{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["States","states","qPos","addHandler","removeHandler","cellHandler","style","marginTop","display","flexDirection","justifyContent","width","onClick","backgroundColor","color","get","Array","from","keys","map","value","i","key","char","state","j","newValue","move","nextState","stateToString","onlyUnique","index","self","indexOf","Tape","values","pointer","label","isSelected","Item","fontSize","border","height","alignItems","App","useState","alphabet","setAlphabet","setPointer","setQPos","initItems","shift","Math","floor","total","items","setItems","useEffect","v","filter","join","handleKeyDown","e","prevState","code","pointerValue","instruction","alert","Map","set","setStates","length","split","window","addEventListener","removeEventListener","className","itemNumber","promptValue","prompt","onChange","target","arr","push","instructions","newInstruction","Number","parseInt","slice","newArr","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d03938cb.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './App.css'\n\nfunction App() {\n  const [alphabet, setAlphabet] = useState<string>(' ')\n\n  const [pointer, setPointer] = useState(0)\n  const [qPos, setQPos] = useState(0)\n\n  const initItems = []\n  const total = 31\n  const shift = Math.floor(total / 2)\n  for (let i = 0; i < total; i++) {\n    initItems[i] = {label: i - shift, value: ' '}\n  }\n\n  const [items, setItems] = useState<IItem[]>(initItems)\n\n  useEffect(() => {\n    setAlphabet(\n      items\n        .map((v) => v.value)\n        .filter(onlyUnique)\n        .join('')\n    )\n  }, [items])\n\n  const handleKeyDown = (e: any) => {\n    if (e.key === 'ArrowLeft') {\n      setPointer((prevState) => prevState - 1)\n    }\n\n    if (e.key === 'ArrowRight') {\n      setPointer((prevState) => prevState + 1)\n    }\n    if (e.code === 'Space') {\n      //next move\n      //read current pointer value\n      const pointerValue = items[pointer + 15].value\n      //get command for current pointer value\n      const state = states.get(pointerValue)\n      if (state) {\n        //change current pointer value\n        let instruction = state[qPos]\n        if (!instruction) {\n          instruction = {\n            newValue: items[pointer + 15].value,\n            nextState: qPos,\n            move: '>',\n          }\n        }\n        items[pointer + 15].value = instruction.newValue\n        setItems([...items])\n\n        //move pointer\n        if (instruction.move === '>') {\n          setPointer((prevState) => prevState + 1)\n        }\n\n        if (instruction.move === '<') {\n          setPointer((prevState) => prevState - 1)\n        }\n\n        //change qPos\n        setQPos(instruction.nextState)\n\n        if (instruction.nextState === -1) {\n          alert('Stopped')\n          setQPos(0)\n        }\n      }\n    }\n  }\n  let map = new Map<string, Array<IState | null>>()\n  map.set(' ', [null, null])\n\n  const [states, setStates] = useState(map)\n\n  // populate states\n  useEffect(() => {\n    let length: number\n    alphabet.split('').map((char) => {\n      const values = states.get(char)\n      if (values) {\n        length = values.length\n      } else {\n        states.set(\n          char,\n          Array.from({length: length || 1}, (v, i) => null)\n        )\n      }\n      return true\n    })\n    setStates(new Map(states))\n  }, [alphabet])\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown)\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [handleKeyDown])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}>\n          <Tape\n            values={items}\n            pointer={pointer}\n            onClick={(itemNumber) => {\n              const promptValue = prompt('Enter value')\n              if (promptValue) {\n                items[itemNumber + 15].value = promptValue\n                setItems([...items])\n              } else {\n                items[itemNumber + 15].value = ' '\n                setItems([...items])\n              }\n            }}\n          />\n          <div style={{display: 'flex', justifyContent: 'start'}}>\n            Alphabet:{' '}\n            <input\n              value={alphabet}\n              onChange={(v) => setAlphabet(v.target.value)}\n            />\n          </div>\n\n          <div style={{display: 'flex', justifyContent: 'start'}}>\n            <States\n              qPos={qPos}\n              states={states}\n              removeHandler={() => {\n                // setStates(\n                //   states.filter((state, index) => index !== states.length - 1)\n                // )\n              }}\n              addHandler={() => {\n                Array.from(states.keys()).map((char) => {\n                  const arr = states.get(char)!\n                  arr.push(null)\n                  states.set(char, arr)\n                })\n                setStates(new Map(states))\n              }}\n              cellHandler={(char, qPos) => {\n                const v = prompt('Enter value')\n                if (v) {\n                  const instructions = v.split('')\n                  const newInstruction = {\n                    newValue: instructions[0],\n                    move: instructions[1] as Move,\n                    nextState: Number.parseInt(instructions.slice(2).join('')),\n                  }\n                  const newArr = states.get(char)\n                  if (newArr) {\n                    newArr[qPos] = newInstruction\n                    states.set(char, newArr)\n                    setStates(new Map(states))\n                  }\n                } else {\n                  const newArr = states.get(char)\n                  if (newArr) {\n                    newArr[qPos] = null\n                    states.set(char, newArr)\n                    setStates(new Map(states))\n                  }\n                }\n              }}\n            />\n          </div>\n        </div>\n      </header>\n    </div>\n  )\n}\n\ntype Move = '<' | '>' | '.'\n\ninterface IState {\n  newValue: string\n  move: Move\n  nextState: number\n}\n\nconst stateToString = (state: IState | null): string => {\n  if (state) {\n    return (\n      (state.newValue === ' ' ? '_' : state.newValue) +\n      state.move +\n      state.nextState\n    )\n  } else {\n    return ' '\n  }\n}\n\ntype IStates = Map<string, Array<IState | null>>\nconst States = ({\n  states,\n  qPos,\n  removeHandler,\n  addHandler,\n  cellHandler,\n}: {\n  qPos: number\n  states: IStates\n  removeHandler: () => void\n  addHandler: () => void\n  cellHandler: (char: string, qPos: number) => void\n}) => {\n  return (\n    <div\n      style={{\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'start',\n      }}>\n      <div style={{width: 200}}>\n        {/*<button onClick={() => removeHandler()}>Remove state</button>*/}\n        <button onClick={addHandler}>Add state</button>\n      </div>\n      <table style={{backgroundColor: 'white', color: 'black'}}>\n        <thead>\n          <tr>\n            <td></td>\n            {states\n              .get(Array.from(states.keys())[0])!\n              .map((value: any, i: number) => (\n                <td key={i}>\n                  Q{i}\n                  {qPos === i && '*'}\n                </td>\n              ))}\n          </tr>\n        </thead>\n        <tbody>\n          {Array.from(states.keys()).map((char, i) => {\n            return (\n              <tr key={i}>\n                <td key={char}>{char === ' ' ? '_' : char}</td>\n                {states.get(char)!.map((state, j) => (\n                  <td\n                    key={j}\n                    onClick={() => {\n                      cellHandler(char, j)\n                    }}>\n                    {stateToString(state)}\n                  </td>\n                ))}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\ninterface IItem {\n  label: number\n  value: string\n}\n\nfunction onlyUnique(value: any, index: any, self: any) {\n  return self.indexOf(value) === index\n}\n\nconst Tape = ({\n  values,\n  pointer,\n  onClick,\n}: {\n  values: Array<IItem>\n  pointer: number\n  onClick: (itemNumber: number) => void\n}) => {\n  return (\n    <div style={{display: 'flex'}}>\n      {values.map((i) => (\n        <Item\n          value={i.value}\n          key={i.label}\n          label={i.label}\n          isSelected={i.label === pointer}\n          onClick={() => {\n            onClick(i.label)\n          }}\n        />\n      ))}\n    </div>\n  )\n}\n\nconst Item = ({\n  value,\n  label,\n  isSelected,\n  onClick,\n}: {\n  value?: string\n  label: number\n  isSelected: boolean\n  onClick: (e: any) => void\n}) => {\n  return (\n    <div style={{display: 'flex', flexDirection: 'column'}}>\n      <div style={{fontSize: 18}}>{label}</div>\n      <div\n        style={{\n          display: 'flex',\n          border: '1px solid black ',\n          width: 30,\n          height: 50,\n          backgroundColor: 'white',\n          color: 'black',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n        onClick={onClick}>\n        {value === ' ' ? '_' : value}\n      </div>\n      {isSelected && <div>▲</div>}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}